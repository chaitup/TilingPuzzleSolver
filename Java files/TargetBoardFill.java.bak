
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.IOException;
import java.io.Serializable;
import java.net.Socket;
import java.net.ServerSocket;
import java.util.ArrayList;
import java.util.List;
/**
 * This class is used to parse the input file, places all the tiles on to the target board
 * finds all possible solutions by checking promising ones and finds isomorphic combinations
 *
 */
public class TargetBoardFill {
	public static TargetBoard board;
	public static EachTile[] tiles,memberTiles;
	public static boolean sameTiles;
	public static int firstTile,allTiles=0;
	public static int[] tileState,position =  new int[] { 1, 2, 3, 4, 5,6, 7,8 };

	public static ArrayList<IsomorphicSolutionCheck> solutions = new ArrayList<IsomorphicSolutionCheck>();
	static long timeForAllSolutions = 0, timeForFirstSolution =0, startingTime = 0;

	public static void main(String[] args){
		try{
			fileParsing(args[0]);
			processPuzzle();
			displayConfiguration();
			System.out.println("num of solutions: "+solutions.size());
		}catch(IOException e){
			e.printStackTrace();
		}

	}

	/**
	 * This method is used to parse the input file and finds the target board
	 * @param fileName
	 * @throws IOException
	 */
	public static void fileParsing(String fileName) throws IOException {
		ArrayList<char[]> inputList = new ArrayList<char[]>();
		BufferedReader reader = new BufferedReader(new FileReader(fileName));
		String line = null;
		try
		{
			while ((line = reader.readLine()) != null) 
				inputList.add(line.toCharArray());
		}finally
		{
			reader.close();
		}
		ExploreTile explore = new ExploreTile(inputList);
		explore.parse();
		ArrayList<NewTile> newTiles = explore.getNewTiles(); // total number of points in the input file
		newTiles.remove(explore.getMaxTile());
		board = new TargetBoard(0, explore.getMaxTile());
		tiles = new EachTile[newTiles.size()];
		firstTile = newTiles.get(0).size();
		sameTiles = true;
		int i = 0;
		for (NewTile newTile : newTiles) {
			tiles[i] = new EachTile(i + 1, newTile);
			tiles[i].display();
			allTiles = allTiles + tiles[i].size;
			if (firstTile != tiles[i].size)
				sameTiles = false;
			i++;
		}	
	}
	/**
	 * This method is used to check for orientations of the tiles by calling the corresponding methods and computes the start time and time to find all solutions
	 */
	public static void processPuzzle() {
		int startingRow = 0, startingColumn = 0;
		for (int i = 0; i < tiles.length; i++)
			//checks for all the orientations of all the tiles
			tiles[i].check(position);
		if (board.size() == allTiles) {
			memberTiles = new EachTile[tiles.length];
			for (int j = 0; j < tiles.length; j++) 
				memberTiles[j] = tiles[j];
			tileState = new int[memberTiles.length];//it keeps track of which tile is placed on the board
			for (int i = 0; i < memberTiles.length; i++)
				tileState[i] = i;
			startingTime = System.currentTimeMillis();
			place(startingRow, startingColumn,tileState,memberTiles);
			timeForAllSolutions = System.currentTimeMillis() - startingTime;
		}  else 
			timeForAllSolutions = 0;
	}

	/**
	 * This method places all the tiles on to the target board and finds all the possibilities
	 * @param row
	 * @param column
	 */
	private static void place(int row, int column,int[] tileState,EachTile[] memberTiles) {
		for (int i = 0; i < memberTiles.length; i++) {
			//checks if the current tile is already used
			if (tileState[i] < 0)
				continue; 
			EachTile tile = memberTiles[tileState[i]];
			//current tile is placed in the first position of the target board with no orientation
			//If the tile fits, place method is called recursively to place the rest of the tiles
			for (tile.currentOrient = 0; tile.currentOrient < tile.count; tile.currentOrient++) {
				//If current orientation does not fits, then next orientation is checked
				if (!board.positionTilePiece(tile, row, column))
					continue;
				tileState[i] =  tileState[i]-tileState.length;
				if (board.isFull()) {
					IsomorphicSolutionCheck solution = board.getSolution();
					if (!isomorphic(solution)) //checking isomorphism
						solutions.add(solution);
					if(solutions.size() == 1){
						timeForFirstSolution = System.currentTimeMillis() - startingTime;
					}
				} else if (!notPromising()) {
					int rowNext = row;
					int columnNext = column;
					while (board.squareId[rowNext][columnNext] != board.id) {
						columnNext++;
						//checking if a row is filled, then going to the next row
						if (columnNext == board.width) {
							columnNext = 0;
							rowNext++;
						}
					}
					//once the tile is fixed, then place method is called recursively to check with the next tiles
					place(rowNext, columnNext,tileState,memberTiles);
				}
				//Upon finding a solution, the last piece is removed and tried with other tiles, for other solutions
				board.removeTile(tile, row, column);
				tileState[i] += tileState.length;
			}
		}
	}

	/**
	 * This method checks if we can proceed further with the current position of the tiles placed
	 * @return
	 */
	public static boolean notPromising() {
		ExploreTile explore = board.getNewBoard();
		explore.parse();
		int size, leastHoleCount = 0, maximumHoleCount = 0,leastSizedTile = Integer.MAX_VALUE,maximumSizedTile = Integer.MIN_VALUE ;
		int leastSizedHole = explore.getMinTile().size();
		int maximumSizedHole = explore.getMaxTile().size();
		for (NewTile newTile : explore.getNewTiles()) {
			size = newTile.size();
			if (size == leastSizedHole)
				leastHoleCount++;
			if (size == maximumSizedHole)
				maximumHoleCount++;
		}
		for (int i = 0; i < memberTiles.length; i++) {
			if (tileState[i] < 0)
				continue;
			if (memberTiles[tileState[i]].size < leastSizedTile)
				leastSizedTile = memberTiles[tileState[i]].size;
			if (memberTiles[tileState[i]].size == leastSizedHole)
				leastHoleCount--;
			if (memberTiles[tileState[i]].size > maximumSizedTile)
				maximumSizedTile = memberTiles[tileState[i]].size;
			if (memberTiles[tileState[i]].size == maximumSizedHole)
				maximumHoleCount--;
		}
		return leastSizedTile > leastSizedHole
				|| (leastSizedTile == leastSizedHole && leastHoleCount > 0)
				|| maximumSizedTile > maximumSizedHole
				|| (maximumSizedTile == maximumSizedHole && maximumHoleCount < 0);
	}
	/**
	 * This method displays all the possible solutions 
	 */
	public static void displayConfiguration() {
		System.out.println("Number of Solutions: " + solutions.size());
		int count = 1;
		for (IsomorphicSolutionCheck solution : solutions) {
			System.out.println("Solution: " + count++);
			solution.display();
			System.out.println();
		}
	}
	/**
	 * This method checks if the present solution matches with any of the previous solution, if yes return true
	 * @param s
	 * @return
	 */
	public static boolean isomorphic(IsomorphicSolutionCheck soln) {
		for (int i = 0; i < solutions.size();) {
			if (soln.identical(solutions.get(i))) {
				return true;
			} else
				i++;
		}
		return false;
	}
}
